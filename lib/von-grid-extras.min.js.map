{"version":3,"sources":["GeneratedTileManager.js","HexGeoGenerator.js","Scene.js","SelectionManager.js","SqrGeoGenerator.js","Tile.js","TilesetManager.js"],"names":["vg","GeneratedTileManager","board","this","geoGen","overlay","prototype","makeTiles","tileHeight","mats","reset","makeGenerator","i","c","geo","t","makeTileGeo","height","push","THREE","MeshPhongMaterial","color","util","randomizeRGB","grid","cells","Tile","cell","geometry","material","materialId","scale","position","copy","cellToPixel","y","h","tileHeightStep","tiles","tileGroup","add","mesh","type","HEX","HexGeoGenerator","SQR","SqrGeoGenerator","Error","init","makeOverlay","size","mat","LineBasicMaterial","opacity","group","remove","Object3D","tileGeo","tileShape","flatGeo","shapeGeo","vertices","_cel","Cell","_vec3","Vector3","_tileSize","_cellWidth","_cellLength","cellSize","dispose","SQRT3","angle","vec","verts","TAU","Math","cos","sin","Shape","moveTo","x","z","lineTo","autoClose","ShapeGeometry","rotateX","DEG_TO_RAD","verticesNeedUpdate","Geometry","config","settings","amount","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","overwrite","ExtrudeGeometry","makeTilePoly","MeshBasicMaterial","Mesh","makeTileHighlight","TorusGeometry","PI","containerObj","createPointsGeometry","abs","set","line","Line","_cellToPixel","rotation","q","s","r","Scene","sceneConfig","controlConfig","sceneSettings","element","document","body","alpha","antialias","clearColor","sortObjects","fog","light","lightPosition","cameraType","cameraPosition","orthoZoom","controlSettings","minDistance","maxDistance","zoomSpeed","noZoom","merge","renderer","WebGLRenderer","setClearColor","width","window","innerWidth","innerHeight","container","DirectionalLight","AmbientLight","normalize","camera","OrthographicCamera","PerspectiveCamera","contolled","controls","OrbitControls","domElement","addEventListener","left","right","top","bottom","aspect","updateProjectionMatrix","setSize","bind","attachTo","constructor","style","setPixelRatio","devicePixelRatio","appendChild","render","update","enableShadows","castShadow","shadow","bias","mapSize","shadowMap","enabled","PCFShadowMap","updateOrthoZoom","focusOn","obj","lookAt","SelectionManager","mouse","onSelect","Signal","onDeselect","selected","toggleSelection","signal","onMouse","select","fireSignal","clearSelection","dispatch","deselect","MouseCaster","DOWN","CLICK","_fullCellSize","rotate","tile","uniqueID","generateID","objectType","TILE","entity","userData","highlight","structure","emissive","_emissive","getHex","setHex","toggle","parent","TilesetManager","manager","LoadingManager","_loaderComplete","_loaderProgress","_loaderError","imgLoader","TextureLoader","geoLoader","BufferGeometryLoader","tilesetBasePath","tilesetMaterials","tilesetTextures","onComplete","onCompleteScope","load","map","hollaback","hollascope","loadMaterials","materials","tileGeoPath","matSources","m","length","id","_loadTextures","textures","normalMap","emissiveMap","specularMap","alphaMap","shininess","specular","Color","call","xhr","lengthComputable","percentComplete","loaded","total","console","log","round","warn","statusText","self","texture"],"mappings":"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","file":"von-grid-extras.min.js","sourcesContent":["/*\n\tInstantiates all tiles for a generated grid.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n*/\nvg.GeneratedTileManager = function(board) {\n\tthis.board = board;\n\tthis.geoGen = null;\n\tthis.overlay = null;\n};\n\nvg.GeneratedTileManager.prototype = {\n\t/*\n\t\tMake all the geometry and objects necessary to give 3D form to the current grid.\n\t\tIt uses ExtrudeGeometry with a slight bevel and creates a few unique materials for variation.\n\n\t\ttileHeight \t[int] \tHow tall the tile geometry is\n\t*/\n\tmakeTiles: function(tileHeight, mats) {\n\t\tthis.board.reset();\n\t\tthis.makeGenerator();\n\n\t\tvar i, c, geo, t;\n\t\tgeo = this.geoGen.makeTileGeo({\n\t\t\theight: tileHeight || 50\n\t\t});\n\n\t\tif (!mats) {\n\t\t\tmats = [];\n\t\t\tfor (i = 0; i < 10; i++) {\n\t\t\t\tmats.push(new THREE.MeshPhongMaterial({\n\t\t\t\t\tcolor: vg.util.randomizeRGB('30, 30, 30', 13)\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\tfor (i in this.board.grid.cells) {\n\t\t\tc = this.board.grid.cells[i];\n\t\t\tt = new vg.Tile({\n\t\t\t\tcell: c,\n\t\t\t\tgeometry: geo,\n\t\t\t\tmaterial: mats[c.materialId],\n\t\t\t\tscale: 1\n\t\t\t});\n\n\t\t\tt.position.copy(this.board.grid.cellToPixel(c));\n\t\t\tt.position.y = c.h * this.board.tileHeightStep;\n\n\t\t\tthis.board.tiles.push(t);\n\t\t\tthis.board.tileGroup.add(t.mesh);\n\t\t}\n\t},\n\n\tmakeGenerator: function() {\n\t\tif (!this.geoGen || this.geoGen.type !== this.board.grid.type) {\n\t\t\tswitch (this.board.grid.type) {\n\t\t\t\tcase vg.HEX:\n\t\t\t\t\tthis.geoGen = new vg.HexGeoGenerator();\n\t\t\t\t\tbreak;\n\t\t\t\tcase vg.SQR:\n\t\t\t\t\tthis.geoGen = new vg.SqrGeoGenerator();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('[GeneratedTileManager] Only hex and square grids are supported');\n\t\t\t}\n\t\t}\n\t\tthis.geoGen.init(this.board.grid);\n\t},\n\n\tmakeOverlay: function(size, color) {\n\t\tcolor = color || 0x000000;\n\t\tvar mat = new THREE.LineBasicMaterial({\n\t\t\tcolor: color,\n\t\t\topacity: 0.3\n\t\t});\n\t\tthis.makeGenerator();\n\n\t\tif (this.overlay) {\n\t\t\tthis.board.group.remove(this.overlay);\n\t\t}\n\n\t\tthis.overlay = new THREE.Object3D();\n\n\t\tthis.geoGen.makeOverlay(this.overlay, size, mat);\n\n\t\tthis.board.group.add(this.overlay);\n\t}\n};\n","vg.HexGeoGenerator = function() {\n\tthis.tileGeo = null;\n\tthis.tileShape = null;\n\tthis.flatGeo = null;\n\tthis.shapeGeo = null;\n\tthis.vertices = null;\n\tthis.grid = null;\n\tthis.type = vg.HEX;\n\n\tthis._cel = new vg.Cell(); // used as scratch object in various operations\n\tthis._vec3 = new THREE.Vector3();\n\tthis._tileSize = -1;\n\tthis._cellWidth = 0;\n\tthis._cellLength = 0;\n};\n\nvg.HexGeoGenerator.prototype = {\n\t/*\n\t\tMake all the required geometry for constructing tiles.\n\t\tsize \t[int]\tCell size as a radius, in threejs world space.\n\t*/\n\tinit: function(grid) {\n\t\tthis.grid = grid;\n\t\tvar size = this.grid.cellSize;\n\t\t// if (size === this._tileSize) return; // already generated necessary geo\n\t\tif (this.flatGeo) this.flatGeo.dispose();\n\t\tif (this.shapeGeo) this.shapeGeo.dispose();\n\t\tthis._tileSize = size || 10;\n\t\tthis._cellWidth = this._tileSize * 2;\n\t\tthis._cellLength = (vg.SQRT3 * 0.5) * this._cellWidth;\n\n\t\t// create base shape used for building geometry\n\t\tvar i, verts = [];\n\t\tvar angle, vec;\n\n\t\t// create the skeleton of the hex\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tangle = (vg.TAU / 6) * i;\n\t\t\tvec = new THREE.Vector3(this._tileSize * Math.cos(angle), 0, this._tileSize * Math.sin(angle));\n\t\t\tverts.push(vec);\n\t\t}\n\t\tthis.vertices = verts;\n\n\t\t// copy the verts into a shape for the geometry to use\n\t\tthis.tileShape = new THREE.Shape();\n\t\tthis.tileShape.moveTo(verts[0].x, verts[0].z);\n\t\tfor (i = 1; i < 6; i++) {\n\t\t\tthis.tileShape.lineTo(verts[i].x, verts[i].z);\n\t\t}\n\t\tthis.tileShape.lineTo(verts[0].x, verts[0].z);\n\t\tthis.tileShape.autoClose = true;\n\n\t\tthis.shapeGeo = new THREE.ShapeGeometry(this.tileShape);\n\t\tthis.shapeGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.shapeGeo.verticesNeedUpdate = true;\n\n\t\tthis.flatGeo = new THREE.Geometry();\n\t\tthis.flatGeo.vertices = verts;\n\t\t// this.flatGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.flatGeo.verticesNeedUpdate = true;\n\t},\n\n\tmakeTileGeo: function(config) {\n\t\tconfig = config || {};\n\t\tvar settings = {\n\t\t\tamount: 1,\n\t\t\tbevelEnabled: false,\n\t\t\tbevelSegments: 1,\n\t\t\tsteps: 1,\n\t\t\tbevelSize: 0.5,\n\t\t\tbevelThickness: 0.5\n\t\t};\n\t\tvg.util.overwrite(settings, config);\n\t\tsettings.amount = config.height || settings.amount;\n\n\t\tif (this.tileGeo) this.tileGeo.dispose();\n\t\tthis.tileGeo = new THREE.ExtrudeGeometry(this.tileShape, settings);\n\t\t// this.tileGeo.translate(0, -settings.amount, 0); // adjust verts so top poly is at y:0\n\n\t\treturn this.tileGeo;\n\t},\n\n\tmakeTilePoly: function(material) {\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\t\tvar mesh = new THREE.Mesh(this.shapeGeo, material);\n\t\t// this._vec3.set(1, 0, 0);\n\t\t// mesh.rotateOnAxis(this._vec3, vg.PI/2);\n\t\treturn mesh;\n\t},\n\n\tmakeTileHighlight: function(material) {\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\n\t\tvar geo = new THREE.TorusGeometry(this.grid.cellSize, 2, 3, 6);\n\t\tvar mesh = new THREE.Mesh(geo, material);\n\n\t\tmesh.rotateX(vg.PI/2);\n\t\tmesh.scale.x = 0.8;\n\t\tmesh.scale.y = 0.8;\n\n\t\treturn mesh;\n\t},\n\n\t/*\n\t\tMake an outlined grid that shows the shape and placement of all its cells.\n\t\tcontainerObj\t[Object3D]\tContainer to add the tile outlines to\n\t\tsize \t\t\t[int]\t\tNumber of cells to generate, as a radius (of the hex-shaped grid)\n\t\tmaterial \t\t[Material]\tthreejs material to use for the Lines\n\t*/\n\tmakeOverlay: function(containerObj, size, material) {\n\t\tvar x, y, z;\n\t\tvar geo = this.tileShape.createPointsGeometry();\n\t\tfor (x = -size; x < size+1; x++) {\n\t\t\tfor (y = -size; y < size+1; y++) {\n\t\t\t\tz = -x-y;\n\t\t\t\tif (Math.abs(x) <= size && Math.abs(y) <= size && Math.abs(z) <= size) {\n\t\t\t\t\tthis._cel.set(x, y, z); // define the cell\n\t\t\t\t\tvar line = new THREE.Line(geo, material);\n\t\t\t\t\tline.position.copy(this._cellToPixel(this._cel));\n\t\t\t\t\tline.position.y = 0;\n\t\t\t\t\tline.rotation.x = 90 * vg.DEG_TO_RAD;\n\t\t\t\t\tcontainerObj.add(line);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*var tally = 0;\n\t\tfor (x = 0; x < containerObj.children.length; x++) {\n\t\t\ttally += containerObj.children[x].geometry.vertices.length;\n\t\t}\n\t\tconsole.log('verts: '+tally);*/\n\t},\n\n\tdispose: function() {\n\t\tif (this.tileGeo) this.tileGeo.dispose();\n\t\tif (this.flatGeo) this.flatGeo.dispose();\n\t\tif (this.shapeGeo) this.shapeGeo.dispose();\n\t},\n\n\t_cellToPixel: function(cell) {\n\t\tthis._vec3.x = cell.q * this._cellWidth * 0.75;\n\t\tthis._vec3.y = cell.h;\n\t\tthis._vec3.z = -((cell.s - cell.r) * this._cellLength * 0.5);\n\t\treturn this._vec3;\n\t},\n};\n","/*\n\tSets up and manages a THREEjs container, camera, and light, making it easy to get going.\n\tAlso provides camera control.\n\n\tAssumes full screen.\n */\n// 'utils/Tools'\nvg.Scene = function(sceneConfig, controlConfig) {\n\tvar sceneSettings = {\n\t\telement: document.body,\n\t\talpha: true,\n\t\tantialias: true,\n\t\tclearColor: '#fff',\n\t\tsortObjects: false,\n\t\tfog: null,\n\t\tlight: null,\n\t\tlightPosition: null,\n\t\tcameraType: 'PerspectiveCamera',\n\t\tcameraPosition: null, // {x, y, z}\n\t\torthoZoom: 4\n\t};\n\n\tvar controlSettings = {\n\t\tminDistance: 100,\n\t\tmaxDistance: 1000,\n\t\tzoomSpeed: 2,\n\t\tnoZoom: false\n\t};\n\n\tsceneSettings = vg.util.merge(sceneSettings, sceneConfig);\n\tif (typeof controlConfig !== 'boolean') {\n\t\tcontrolSettings = vg.util.merge(controlSettings, controlConfig);\n\t}\n\n\tthis.renderer = new THREE.WebGLRenderer({\n\t\talpha: sceneSettings.alpha,\n\t\tantialias: sceneSettings.antialias\n\t});\n\tthis.renderer.setClearColor(sceneSettings.clearColor, 0);\n\tthis.renderer.sortObjects = sceneSettings.sortObjects;\n\n\tthis.width = window.innerWidth;\n\tthis.height = window.innerHeight;\n\n\tthis.orthoZoom = sceneSettings.orthoZoom;\n\n\tthis.container = new THREE.Scene();\n\tthis.container.fog = sceneSettings.fog;\n\n\tif (!sceneSettings.light) {\n\t\tsceneSettings.light = new THREE.DirectionalLight(0xdddddd);\n\t\tthis.container.add(new THREE.AmbientLight(0xdddddd));\n\t}\n\tif (!sceneSettings.lightPosition) {\n\t\tsceneSettings.light.position.set(-1, 1, -1).normalize();\n\t}\n\tthis.container.add(sceneSettings.light);\n\tthis.light = sceneSettings.light; // main shadow-casting light\n\n\tif (sceneSettings.cameraType === 'OrthographicCamera') {\n\t\tvar width = window.innerWidth / this.orthoZoom;\n\t\tvar height = window.innerHeight / this.orthoZoom;\n\t\tthis.camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 5000);\n\t}\n\telse {\n\t\tthis.camera = new THREE.PerspectiveCamera(50, this.width / this.height, 1, 5000);\n\t}\n\n\tthis.contolled = !!controlConfig;\n\tif (this.contolled) {\n\t\tthis.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n\t\tvg.util.overwrite(this.controls, controlSettings);\n\t}\n\n\tif (sceneSettings.cameraPosition) {\n\t\tthis.camera.position.copy(sceneSettings.cameraPosition);\n\t}\n\n\twindow.addEventListener('resize', function onWindowResize() {\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\t\tif (this.camera.type === 'OrthographicCamera') {\n\t\t\tvar width = this.width / this.orthoZoom;\n\t\t\tvar height = this.height / this.orthoZoom;\n\t\t\tthis.camera.left = width / -2;\n\t\t\tthis.camera.right = width / 2;\n\t\t\tthis.camera.top = height / 2;\n\t\t\tthis.camera.bottom = height / -2;\n\t\t}\n\t\telse {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t}\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderer.setSize(this.width, this.height);\n\t}.bind(this), false);\n\n\tthis.attachTo(sceneSettings.element);\n};\n\nvg.Scene.prototype = {\n\tconstructor: vg.Scene,\n\n\tattachTo: function(element) {\n\t\telement.style.width = this.width + 'px';\n\t\telement.style.height = this.height + 'px';\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(this.width, this.height);\n\t\telement.appendChild(this.renderer.domElement);\n\t},\n\n\tadd: function(mesh) {\n\t\tthis.container.add(mesh);\n\t},\n\n\tremove: function(mesh) {\n\t\tthis.container.remove(mesh);\n\t},\n\n\trender: function() {\n\t\tif (this.contolled) this.controls.update();\n\t\tthis.renderer.render(this.container, this.camera);\n\t},\n\n\tenableShadows: function() {\n\t\tthis.light.castShadow = true;\n\t\tthis.light.shadow.bias = 0.0001;\n\t\tthis.light.shadow.mapSize.width = 2048;\n\t\tthis.light.shadow.mapSize.height = 2048;\n\t\tthis.renderer.shadowMap.enabled = true;\n\t\tthis.renderer.shadowMap.type = THREE.PCFShadowMap; //PCFSoftShadowMap\n\t\t// this.light.shadowCameraVisible = true;\n\t},\n\n\tupdateOrthoZoom: function() {\n\t\tif (this.orthoZoom <= 0) {\n\t\t\tthis.orthoZoom = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar width = this.width / this.orthoZoom;\n\t\tvar height = this.height / this.orthoZoom;\n\t\tthis.camera.left = width / -2;\n\t\tthis.camera.right = width / 2;\n\t\tthis.camera.top = height / 2;\n\t\tthis.camera.bottom = height / -2;\n\t\tthis.camera.updateProjectionMatrix();\n\t},\n\n\tfocusOn: function(obj) {\n\t\tthis.camera.lookAt(obj.position);\n\t}\n};\n","vg.SelectionManager = function(mouse) {\n\tthis.mouse = mouse;\n\n\tthis.onSelect = new vg.Signal();\n\tthis.onDeselect = new vg.Signal();\n\n\tthis.selected = null;\n\t// deselect if player clicked on the same thing twice\n\tthis.toggleSelection = false;\n\n\t// allow multiple entities to be selected at once\n\t// this.multiselect = false; // todo\n\t// this.allSelected = new LinkedList();\n\n\tthis.mouse.signal.add(this.onMouse, this);\n};\n\nvg.SelectionManager.prototype = {\n\tselect: function(obj, fireSignal) {\n\t\tif (!obj) return;\n\t\tfireSignal = fireSignal || true;\n\n\t\tif (this.selected !== obj) {\n\t\t\t// deselect previous object\n\t\t\tthis.clearSelection(fireSignal);\n\t\t}\n\t\tif (obj.selected) {\n\t\t\tif (this.toggleSelection) {\n\t\t\t\tif (fireSignal) {\n\t\t\t\t\tthis.onDeselect.dispatch(obj);\n\t\t\t\t}\n\t\t\t\tobj.deselect();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tobj.select();\n\t\t}\n\n\t\tthis.selected = obj;\n\t\tif (fireSignal) {\n\t\t\tthis.onSelect.dispatch(obj);\n\t\t}\n\t},\n\n\tclearSelection: function(fireSignal) {\n\t\tfireSignal = fireSignal || true;\n\t\tif (this.selected) {\n\t\t\tif (fireSignal) {\n\t\t\t\tthis.onDeselect.dispatch(this.selected);\n\t\t\t}\n\t\t\tthis.selected.deselect();\n\t\t}\n\t\tthis.selected = null;\n\t},\n\n\tonMouse: function(type, obj) {\n\t\tswitch (type) {\n\t\t\tcase vg.MouseCaster.DOWN:\n\t\t\t\tif (!obj) {\n\t\t\t\t\tthis.clearSelection();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.CLICK:\n\t\t\t\tthis.select(obj);\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\nvg.SelectionManager.prototype.constructor = vg.SelectionManager;\n","vg.SqrGeoGenerator = function() {\n\tthis.tileGeo = null;\n\tthis.tileShape = null;\n\tthis.flatGeo = null;\n\tthis.shapeGeo = null;\n\tthis.vertices = null;\n\tthis.grid = null;\n\tthis.type = vg.SQR;\n\n\tthis._cel = new vg.Cell(); // used as scratch object in various operations\n\tthis._vec3 = new THREE.Vector3();\n\tthis._tileSize = -1;\n\tthis._cellWidth = 0;\n\tthis._cellLength = 0;\n};\n\nvg.SqrGeoGenerator.prototype = {\n\t/*\n\t\tMake all the required geometry for constructing tiles.\n\t\tsize \t[int]\tCell size as a radius, in threejs world space.\n\t*/\n\tinit: function(grid) {\n\t\tthis.grid = grid;\n\t\tvar size = this.grid.cellSize;\n\t\t// if (size === this._tileSize) return; // already generated necessary geo\n\t\tif (this.flatGeo) this.flatGeo.dispose();\n\t\tif (this.shapeGeo) this.shapeGeo.dispose();\n\t\tthis._tileSize = size || 10;\n\t\tthis._cellWidth = this._tileSize * 2;\n\t\tthis._cellLength = this._cellWidth;\n\n\t\t// create base shape used for building geometry\n\t\tvar i, verts = [];\n\n\t\t// create the skeleton of the square\n\t\tverts.push(new THREE.Vector3(0, 0, 0));\n\t\tverts.push(new THREE.Vector3(this._tileSize, 0, 0));\n\t\tverts.push(new THREE.Vector3(this._tileSize, 0, this._tileSize));\n\t\tverts.push(new THREE.Vector3(0, 0, this._tileSize));\n\t\tthis.vertices = verts;\n\n\t\t// copy the verts into a shape for the geometry to use\n\t\tthis.tileShape = new THREE.Shape();\n\t\tthis.tileShape.moveTo(verts[0].x, verts[0].z);\n\t\tfor (i = 1; i < 4; i++) {\n\t\t\tthis.tileShape.lineTo(verts[i].x, verts[i].z);\n\t\t}\n\t\tthis.tileShape.lineTo(verts[0].x, verts[0].z);\n\t\tthis.tileShape.autoClose = true;\n\n\t\tthis.shapeGeo = new THREE.ShapeGeometry(this.tileShape);\n\t\tthis.shapeGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.shapeGeo.verticesNeedUpdate = true;\n\n\t\tthis.flatGeo = new THREE.Geometry();\n\t\tthis.flatGeo.vertices = verts;\n\t\tthis.flatGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.flatGeo.verticesNeedUpdate = true;\n\t},\n\n\tmakeTileGeo: function(config) {\n\t\tconfig = config || {};\n\t\tvar settings = {\n\t\t\tamount: 1,\n\t\t\tbevelEnabled: false,\n\t\t\tbevelSegments: 1,\n\t\t\tsteps: 1,\n\t\t\tbevelSize: 0.5,\n\t\t\tbevelThickness: 0.5\n\t\t};\n\t\tvg.util.overwrite(settings, config);\n\t\tsettings.amount = config.height || settings.amount;\n\n\t\tif (this.tileGeo) this.tileGeo.dispose();\n\t\tthis.tileGeo = new THREE.ExtrudeGeometry(this.tileShape, settings);\n\t\t// this.tileGeo.translate(0, -settings.amount, 0); // adjust verts so top poly is at y:0\n\n\t\treturn this.tileGeo;\n\t},\n\n\tmakeTilePoly: function(material) {\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\t\tvar mesh = new THREE.Mesh(this.shapeGeo, material);\n\t\t// this._vec3.set(1, 0, 0);\n\t\t// mesh.rotateOnAxis(this._vec3, vg.PI/2);\n\t\treturn mesh;\n\t},\n\n\tmakeTileHighlight: function(material) {\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\n\t\tvar geo = new THREE.TorusGeometry(this.grid.cellSize, 2, 3, 4);\n\t\tvar mesh = new THREE.Mesh(geo, material);\n\n\t\t// mesh.rotateX(vg.PI/2);\n\t\t// mesh.rotateZ(vg.PI/2);\n\t\tmesh.scale.x = 0.8;\n\t\tmesh.scale.y = 0.8;\n\n\t\treturn mesh;\n\t},\n\n\t/*\n\t\tMake an outlined grid that shows the shape and placement of all its cells.\n\t\tcontainerObj\t[Object3D]\tContainer to add the tile outlines to\n\t\tsize \t\t\t[int]\t\tNumber of cells to generate, as a radius (of the hex-shaped grid)\n\t\tmaterial \t\t[Material]\tthreejs material to use for the Lines\n\t*/\n\tmakeOverlay: function(containerObj, size, material) {\n\t\tvar x, y, z;\n\t\tvar geo = this.tileShape.createPointsGeometry();\n\t\tfor (x = -size; x < size+1; x++) {\n\t\t\tfor (y = -size; y < size+1; y++) {\n\t\t\t\tz = -x-y;\n\t\t\t\tif (Math.abs(x) <= size && Math.abs(y) <= size && Math.abs(z) <= size) {\n\t\t\t\t\tthis._cel.set(x, y, z); // define the cell\n\t\t\t\t\tvar line = new THREE.Line(geo, material);\n\t\t\t\t\tline.position.copy(this._cellToPixel(this._cel));\n\t\t\t\t\tline.position.y = 0;\n\t\t\t\t\tline.rotation.x = 90 * vg.DEG_TO_RAD;\n\t\t\t\t\tcontainerObj.add(line);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*var tally = 0;\n\t\tfor (x = 0; x < containerObj.children.length; x++) {\n\t\t\ttally += containerObj.children[x].geometry.vertices.length;\n\t\t}\n\t\tconsole.log('verts: '+tally);*/\n\t},\n\n\tdispose: function() {\n\t\tif (this.tileGeo) this.tileGeo.dispose();\n\t\tif (this.flatGeo) this.flatGeo.dispose();\n\t\tif (this.shapeGeo) this.shapeGeo.dispose();\n\t},\n\n\t_cellToPixel: function(cell) {\n\t\tthis._vec3.x = cell.q * this._fullCellSize;\n\t\tthis._vec3.y = cell.h;\n\t\tthis._vec3.z = cell.r * this._fullCellSize;\n\t\treturn this._vec3;\n\t},\n};\n","/*\n\tExample tile class that constructs its geometry for rendering and holds some gameplay properties.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n*/\nvg.Tile = function(config) {\n\tconfig = config || {};\n\tvar settings = {\n\t\tscale: 1,\n\t\tcell: null, // required vg.Cell\n\t\tgeometry: null, // required threejs geometry\n\t\tmaterial: null, // not required but it would improve performance significantly\n\t\trotate: true // should be true for generated meshes, otherwise set to false\n\t};\n\tsettings = vg.util.merge(settings, config);\n\n\tif (!settings.cell || !settings.geometry) {\n\t\tthrow new Error('Missing vg.Tile configuration');\n\t}\n\n\tif (settings.cell.tile) {\n\t\t// remove whatever was there\n\t\tsettings.cell.tile.dispose();\n\t}\n\n\tthis.cell = settings.cell;\n\tthis.cell.tile = this;\n\n\tthis.uniqueID = vg.util.generateID();\n\n\tthis.geometry = settings.geometry;\n\tthis.material = settings.material;\n\tif (!this.material) {\n\t\tthis.material = new THREE.MeshPhongMaterial({\n\t\t\tcolor: vg.util.randomizeRGB('30, 30, 30', 13)\n\t\t});\n\t}\n\n\tthis.objectType = vg.TILE;\n\tthis.entity = null;\n\tthis.userData = {};\n\n\tthis.selected = false;\n\tthis.highlight = '0x0084cc';\n\n\tthis.mesh = new THREE.Mesh(this.geometry, this.material);\n\tthis.mesh.userData.structure = this;\n\n\t// create references so we can control orientation through this (Tile), instead of drilling down\n\tthis.position = this.mesh.position;\n\tthis.rotation = this.mesh.rotation;\n\n\t// rotate it to face \"up\" (the threejs coordinate space is Y+)\n\tif (settings.rotate) this.rotation.x = 90 * vg.DEG_TO_RAD;\n\tthis.mesh.scale.set(settings.scale, settings.scale, 1);\n\n\tif (this.material.emissive) {\n\t\tthis._emissive = this.material.emissive.getHex();\n\t}\n\telse {\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.Tile.prototype = {\n\tselect: function() {\n\t\tif (this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this.highlight);\n\t\t}\n\t\tthis.selected = true;\n\t\treturn this;\n\t},\n\n\tdeselect: function() {\n\t\tif (this._emissive !== null && this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this._emissive);\n\t\t}\n\t\tthis.selected = false;\n\t\treturn this;\n\t},\n\n\ttoggle: function() {\n\t\tif (this.selected) {\n\t\t\tthis.deselect();\n\t\t}\n\t\telse {\n\t\t\tthis.select();\n\t\t}\n\t\treturn this;\n\t},\n\n\tdispose: function() {\n\t\tif (this.cell && this.cell.tile) this.cell.tile = null;\n\t\tthis.cell = null;\n\t\tthis.position = null;\n\t\tthis.rotation = null;\n\t\tif (this.mesh.parent) this.mesh.parent.remove(this.mesh);\n\t\tthis.mesh.userData.structure = null;\n\t\tthis.mesh = null;\n\t\tthis.material = null;\n\t\tthis.userData = null;\n\t\tthis.entity = null;\n\t\tthis.geometry = null;\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.Tile.prototype.constructor = vg.Tile;\n","/*\n\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n*/\nvg.TilesetManager = function(board) {\n\tthis.board = board;\n\tthis.manager = new THREE.LoadingManager(this._loaderComplete.bind(this), this._loaderProgress, this._loaderError);\n\tthis.imgLoader = new THREE.TextureLoader(this.manager);\n\tthis.geoLoader = new THREE.BufferGeometryLoader(this.manager);\n\n\tthis.tileGeo = null;\n\tthis.tilesetBasePath = null;\n\tthis.tilesetMaterials = null;\n\tthis.tilesetTextures = null;\n\tthis.onComplete = null;\n\tthis.onCompleteScope = null;\n};\n\nvg.TilesetManager.prototype = {\n\t/*\n\t\tLoads and creates materials, geometry, and vg.Tiles to give 3D form to the current grid.\n\n\t\tmap = {\n\t\t\ttileGeoPath: [String] // full path eg 'path/to/geo/hexTile.json'\n\t\t\ttilesetBasePath: [String] // eg 'path/to/materials/'\n\t\t\tmaterials: [\n\t\t\t\t{\n\t\t\t\t\tid: 0, // array index\n\t\t\t\t\tmap: [String] // required; all maps are filenames\n\t\t\t\t\tnormalMap\n\t\t\t\t\temissiveMap\n\t\t\t\t\tspecularMap\n\t\t\t\t\talphaMap\n\t\t\t\t\tshininess: [Number], // default is 0\n\t\t\t\t\tspecular: [Hex or String], // default is 0x111111\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 1, ...\n\t\t\t\t},\n\t\t\t\t...\n\t\t\t]\n\t\t}\n\t*/\n\tload: function(map, hollaback, hollascope) {\n\t\tthis.onComplete = hollaback;\n\t\tthis.onCompleteScope = hollascope;\n\t\tthis.tilesetBasePath = map.tilesetBasePath;\n\t\t// load in new geo and materials, then manager.onComplete will fire to build new ones\n\t\tthis.loadMaterials(map.materials);\n\t\t// start loading the BufferGeometry json\n\t\tthis.geoLoader.load(map.tileGeoPath, function(geo) {\n\t\t\tthis.tileGeo = geo;\n\t\t}.bind(this));\n\t},\n\n\t/*\n\t\tLoad all of the textures in the array of materials (one material == one tile type)\n\t*/\n\tloadMaterials: function(matSources) {\n\t\tvar m, i;\n\t\tthis.tilesetTextures = [];\n\n\t\tfor (i = 0; i < matSources.length; i++) {\n\t\t\tm = matSources[i];\n\t\t\tthis.tilesetTextures[m.id] = {};\n\t\t\tthis._loadTextures(m);\n\t\t}\n\t},\n\n\tmakeTiles: function() {\n\t\tvar grid = this.board.grid;\n\t\tvar i, c, t;\n\n\t\tfor (i in grid.cells) {\n\t\t\tc = grid.cells[i];\n\t\t\tt = new vg.Tile({\n\t\t\t\tcell: c,\n\t\t\t\tgeometry: this.tileGeo,\n\t\t\t\tmaterial: this.tilesetMaterials[c.materialId]\n\t\t\t});\n\n\t\t\tt.position.copy(grid.cellToPixel(c));\n\t\t\tt.position.y = c.h * this.board.tileHeightStep;\n\n\t\t\tthis.board.tiles.push(t);\n\t\t\tthis.board.tileGroup.add(t.mesh);\n\t\t}\n\t},\n\n\t/*\n\t\tEssentially clear cache so we can load in a different tileset.\n\t\tDoes NOT remove/dispose the meshes, materials, or geometry - use board.reset() for that\n\t*/\n\treset: function() {\n\t\tthis.tileGeo = null;\n\t\tthis.tilesetMaterials = null;\n\t\tthis.tilesetTextures = null;\n\t},\n\n\t_loaderComplete: function() {\n\t\tvar i, textures;\n\n\t\tthis.tilesetMaterials = [];\n\n\t\tfor (i = 0; i < this.tilesetTextures.length; i++) {\n\t\t\ttextures = this.tilesetTextures[i];\n\t\t\tthis.tilesetMaterials[i] = new THREE.MeshPhongMaterial({\n\t\t\t\tmap: textures.map,\n\t\t\t\tnormalMap: textures.normalMap || null,\n\t\t\t\temissiveMap: textures.emissiveMap || null,\n\t\t\t\tspecularMap: textures.specularMap || null,\n\t\t\t\talphaMap: textures.alphaMap || null,\n\t\t\t\tshininess: textures.shininess || 0,\n\t\t\t\tspecular: textures.specular ? new THREE.Color(textures.specular) : null,\n\t\t\t});\n\t\t}\n\n\t\tif (this.onComplete) this.onComplete.call(this.onCompleteScope || null);\n\t},\n\n\t_loaderProgress: function(xhr) {\n\t\tif (xhr.lengthComputable) {\n\t\t\tvar percentComplete = xhr.loaded / xhr.total * 100;\n\t\t\tconsole.log(Math.round(percentComplete, 2) + '% downloaded');\n\t\t}\n\t},\n\n\t_loaderError: function(xhr) {\n\t\tconsole.warn('[TilesetManager] ' + xhr.statusText);\n\t},\n\n\t_loadTextures: function(m) {\n\t\tvar self = this;\n\t\tthis.imgLoader.load(this.tilesetBasePath+m.map, function(texture) {\n\t\t\tself.tilesetTextures[m.id].map = texture;\n\t\t});\n\n\t\tif (m.normalMap) {\n\t\t\tthis.imgLoader.load(this.tilesetBasePath+m.normalMap, function(texture) {\n\t\t\t\tself.tilesetTextures[m.id].normalMap = texture;\n\t\t\t});\n\t\t}\n\t\tif (m.emissiveMap) {\n\t\t\tthis.imgLoader.load(this.tilesetBasePath+m.emissiveMap, function(texture) {\n\t\t\t\tself.tilesetTextures[m.id].emissiveMap = texture;\n\t\t\t});\n\t\t}\n\t\tif (m.specularMap) {\n\t\t\tthis.imgLoader.load(this.tilesetBasePath+m.specularMap, function(texture) {\n\t\t\t\tself.tilesetTextures[m.id].specularMap = texture;\n\t\t\t});\n\t\t}\n\t\tif (m.alphaMap) {\n\t\t\tthis.imgLoader.load(this.tilesetBasePath+m.alphaMap, function(texture) {\n\t\t\t\tself.tilesetTextures[m.id].alphaMap = texture;\n\t\t\t});\n\t\t}\n\t}\n};\n"],"sourceRoot":"/source/"}